CREATE OR REPLACE TYPE AID_OBJ IS OBJECT (AID NUMBER, TOTAL_BID NUMBER, PAID NUMBER);
/
CREATE OR REPLACE TYPE AID_TABLE AS TABLE OF AID_OBJ;
/
CREATE OR REPLACE TYPE AUCTION_OBJ IS OBJECT (QID NUMBER,ADVERTISERID NUMBER,TOTAL_BID NUMBER);
/
CREATE OR REPLACE TYPE AUCTION_TABLE AS TABLE OF AUCTION_OBJ;
/
CREATE OR REPLACE TYPE BIDDER_OBJ AS OBJECT ( ADVERTISERID NUMBER, TOTAL_BID NUMBER, G1_BALANCE NUMBER,G2_BALANCE NUMBER,B1_BALANCE NUMBER,B2_BALANCE NUMBER,GEN1_BALANCE NUMBER,GEN2_BALANCE NUMBER, BUDGET NUMBER, CTC NUMBER);
/
CREATE OR REPLACE TYPE BIDDER_TABLE AS TABLE OF BIDDER_OBJ;
/
CREATE OR REPLACE TYPE FINAL_OBJ AS OBJECT ( QID NUMBER, ADVERTISERID NUMBER, RANK NUMBER, BUDGET NUMBER, TOTAL_BID NUMBER,CTC NUMBER);
/
CREATE OR REPLACE TYPE FINAL_TABLE AS TABLE OF FINAL_OBJ;
/
CREATE OR REPLACE TYPE INDEX_OBJ AS OBJECT (QID NUMBER,INDNUM NUMBER,CNT NUMBER);
/
CREATE OR REPLACE TYPE INDEX_TABLE AS TABLE OF INDEX_OBJ;
/
CREATE OR REPLACE TYPE MATCHED_KEYWORD_AID_OBJ IS OBJECT (KEYWORD VARCHAR2(100),ADVERTISERID NUMBER,BID NUMBER);
/
CREATE OR REPLACE TYPE MATCHED_KEYWORD_AID_TABLE AS TABLE OF MATCHED_KEYWORD_AID_OBJ;
/
CREATE OR REPLACE TYPE RANKED_OBJ AS OBJECT (QID NUMBER, ADVERTISERID NUMBER, ADRANK NUMBER,BUDGET NUMBER,TOTAL_BID NUMBER, CTC NUMBER);
/
CREATE OR REPLACE TYPE RANKED_TABLE AS TABLE OF RANKED_OBJ;
/





CREATE OR REPLACE
FUNCTION SIMILARITY_CALCULATOR (QUERY_TABLE INDEX_TABLE, ADVERTISER_TABLE INDEX_TABLE) RETURN NUMBER IS
DOT_PRODUCT NUMBER := 0;
SUMCOUNT NUMBER := 0;
SIMILARITY NUMBER := 0;
COUNT_ADVERTISER NUMBER := 0;
COUNT_QUERY NUMBER := 0;
BEGIN
FOR QRY IN (SELECT QID, INDNUM, CNT FROM TABLE(QUERY_TABLE))
  LOOP
    COUNT_QUERY := (QRY.CNT * QRY.CNT) + COUNT_QUERY;
  END LOOP;
  FOR AD IN (SELECT QID, INDNUM, CNT FROM TABLE(ADVERTISER_TABLE))
    LOOP
    COUNT_ADVERTISER := AD.CNT + COUNT_ADVERTISER;
      FOR Q IN (SELECT INDNUM,CNT FROM TABLE(QUERY_TABLE) WHERE INDNUM = AD.INDNUM)
        LOOP
            SUMCOUNT := (AD.CNT * Q.CNT) + SUMCOUNT;
        END LOOP;   
    END LOOP;
    DOT_PRODUCT := SUMCOUNT;
   -- dbms_output.put_line('DOT_PRODUCT:'||DOT_PRODUCT);
    COUNT_ADVERTISER := SQRT(COUNT_ADVERTISER);
--dbms_output.put_line('COUNT_ADVERTISER:'||COUNT_ADVERTISER);
    COUNT_QUERY := SQRT(COUNT_QUERY);
 --  dbms_output.put_line('COUNT_QUERY:'||COUNT_QUERY);
    IF (COUNT_ADVERTISER * COUNT_QUERY) != 0 THEN
      SIMILARITY := DOT_PRODUCT/(COUNT_ADVERTISER * COUNT_QUERY);
    ELSE
      SIMILARITY := 0;
    END IF;
RETURN SIMILARITY;
END SIMILARITY_CALCULATOR;
/

CREATE OR REPLACE
FUNCTION CREATE_ADVERTISER_VECTOR (ADVID IN NUMBER) RETURN INDEX_TABLE IS
ADVERTISER_IND INDEX_TABLE := INDEX_TABLE();
P NUMBER := 0;
BEGIN
   FOR G IN (SELECT INDEX_NUMBER, CNT FROM ADVERTISERS_INDEX WHERE ADVERTISERID = ADVID)
            LOOP
              ADVERTISER_IND.EXTEND;
              P := P+1;
              ADVERTISER_IND(P) := INDEX_OBJ(ADVID,G.INDEX_NUMBER,G.CNT);
            END LOOP;
  RETURN ADVERTISER_IND;
END CREATE_ADVERTISER_VECTOR;
/

CREATE OR REPLACE
PROCEDURE SECOND_AUCTION (RANK_TABLE_CHOSEN IN FINAL_TABLE, CHOICE IN VARCHAR2, TNUM IN NUMBER, ALL_ADVERTISERS AID_TABLE)IS
RANK_TABLE_CHOSEN_COPY FINAL_TABLE := FINAL_TABLE();
BAL NUMBER := 0;
CT NUMBER := 0;
TOTAL_BIDDERS NUMBER := 0;
REMAINING_BIDDERS NUMBER := 0;
NEXT_HIGHEST_TOTAL_BID NUMBER:= 0;
CT_HIGHEST_BID NUMBER := 0;
BEGIN
  RANK_TABLE_CHOSEN_COPY := RANK_TABLE_CHOSEN;
  SELECT COUNT(*) INTO TOTAL_BIDDERS FROM TABLE(RANK_TABLE_CHOSEN_COPY);
      IF CHOICE = 'GREEDY' THEN
        FOR W IN (SELECT QID, ADVERTISERID, RANK, TOTAL_BID, CTC, BUDGET FROM TABLE(RANK_TABLE_CHOSEN) WHERE ROWNUM <= TNUM)
          LOOP
            SELECT G_2_BALANCE, G_2_COUNT INTO BAL, CT FROM ADVERTISERS WHERE ADVERTISERID = W.ADVERTISERID;
            IF CT < (W.CTC * 100) THEN
              CT := CT + 1;
              SELECT COUNT(*) INTO REMAINING_BIDDERS FROM TABLE(RANK_TABLE_CHOSEN_COPY) WHERE RANK > W.RANK;
              SELECT COUNT(*) INTO CT_HIGHEST_BID FROM (SELECT TOTAL_BID FROM TABLE(ALL_ADVERTISERS) WHERE TOTAL_BID < W.TOTAL_BID);
              IF CT_HIGHEST_BID = 0 THEN
                NEXT_HIGHEST_TOTAL_BID := W.TOTAL_BID;
              ELSE
                SELECT MAX(TOTAL_BID) INTO NEXT_HIGHEST_TOTAL_BID FROM TABLE(ALL_ADVERTISERS) WHERE TOTAL_BID < W.TOTAL_BID;
              END IF;
              BAL := BAL - NEXT_HIGHEST_TOTAL_BID;
              EXECUTE IMMEDIATE 'UPDATE ADVERTISERS SET G_2_BALANCE = '||BAL||', G_2_COUNT = '||CT||' WHERE ADVERTISERID = '||W.ADVERTISERID;
              EXECUTE IMMEDIATE 'COMMIT';
              EXECUTE IMMEDIATE 'INSERT INTO GREEDY_SECOND (QID,ADVERTISERID,RANK,BALANCE,BUDGET) VALUES ('||W.QID||','||W.ADVERTISERID||','||W.RANK||','||BAL||','||W.BUDGET||')';
              EXECUTE IMMEDIATE 'COMMIT';
            ELSIF CT >= (W.CTC * 100) AND CT < 99 THEN
                CT := CT + 1;
                EXECUTE IMMEDIATE 'UPDATE ADVERTISERS SET G_2_COUNT = '||CT||' WHERE ADVERTISERID = '||W.ADVERTISERID;
                EXECUTE IMMEDIATE 'COMMIT';
                EXECUTE IMMEDIATE 'INSERT INTO GREEDY_SECOND (QID,ADVERTISERID,RANK,BALANCE,BUDGET) VALUES ('||W.QID||','||W.ADVERTISERID||','||W.RANK||','||BAL||','||W.BUDGET||')';
                EXECUTE IMMEDIATE 'COMMIT';
            ELSIF CT = 99 THEN
                CT := 0;
                EXECUTE IMMEDIATE 'UPDATE ADVERTISERS SET G_2_COUNT = '||CT||' WHERE ADVERTISERID = '||W.ADVERTISERID;
                EXECUTE IMMEDIATE 'COMMIT';
                EXECUTE IMMEDIATE 'INSERT INTO GREEDY_SECOND (QID,ADVERTISERID,RANK,BALANCE,BUDGET) VALUES ('||W.QID||','||W.ADVERTISERID||','||W.RANK||','||BAL||','||W.BUDGET||')';
                EXECUTE IMMEDIATE 'COMMIT';
            END IF;
          END LOOP;
      ELSIF CHOICE = 'BALANCE' THEN
        FOR X IN (SELECT QID, ADVERTISERID, RANK, TOTAL_BID, CTC, BUDGET FROM TABLE(RANK_TABLE_CHOSEN) WHERE ROWNUM <= TNUM)
          LOOP
            SELECT B_2_BALANCE,B_2_COUNT INTO BAL,CT FROM ADVERTISERS WHERE ADVERTISERID = X.ADVERTISERID;
            IF CT < (X.CTC * 100) THEN
              CT := CT + 1;
              SELECT COUNT(*) INTO REMAINING_BIDDERS FROM TABLE(RANK_TABLE_CHOSEN_COPY) WHERE RANK > X.RANK;
              SELECT COUNT(*) INTO CT_HIGHEST_BID FROM (SELECT TOTAL_BID FROM TABLE(ALL_ADVERTISERS) WHERE TOTAL_BID < X.TOTAL_BID);
              IF CT_HIGHEST_BID = 0 THEN
                NEXT_HIGHEST_TOTAL_BID := X.TOTAL_BID;
              ELSE
                SELECT MAX(TOTAL_BID) INTO NEXT_HIGHEST_TOTAL_BID FROM TABLE(ALL_ADVERTISERS) WHERE TOTAL_BID < X.TOTAL_BID;
              END IF;
              BAL := BAL - NEXT_HIGHEST_TOTAL_BID;
              EXECUTE IMMEDIATE 'UPDATE ADVERTISERS SET B_2_BALANCE = '||BAL||',B_2_COUNT = '||CT||' WHERE ADVERTISERID = '||X.ADVERTISERID;
              EXECUTE IMMEDIATE 'COMMIT';
              EXECUTE IMMEDIATE 'INSERT INTO BALANCE_SECOND (QID,ADVERTISERID,RANK,BALANCE,BUDGET) VALUES ('||X.QID||','||X.ADVERTISERID||','||X.RANK||','||BAL||','||X.BUDGET||')';
              EXECUTE IMMEDIATE 'COMMIT';
            ELSE
              IF CT >= (X.CTC * 100) AND CT < 99 THEN
                CT := CT + 1;
                EXECUTE IMMEDIATE 'UPDATE ADVERTISERS SET B_2_COUNT = '||CT||' WHERE ADVERTISERID = '||X.ADVERTISERID;
                EXECUTE IMMEDIATE 'COMMIT';
                EXECUTE IMMEDIATE 'INSERT INTO BALANCE_SECOND (QID,ADVERTISERID,RANK,BALANCE,BUDGET) VALUES ('||X.QID||','||X.ADVERTISERID||','||X.RANK||','||BAL||','||X.BUDGET||')';
                EXECUTE IMMEDIATE 'COMMIT';
              ELSIF CT = 99 THEN
                CT := 0;
                EXECUTE IMMEDIATE 'UPDATE ADVERTISERS SET B_2_COUNT = '||CT||' WHERE ADVERTISERID = '||X.ADVERTISERID;
                EXECUTE IMMEDIATE 'COMMIT';
                EXECUTE IMMEDIATE 'INSERT INTO BALANCE_SECOND (QID,ADVERTISERID,RANK,BALANCE,BUDGET) VALUES ('||X.QID||','||X.ADVERTISERID||','||X.RANK||','||BAL||','||X.BUDGET||')';
                EXECUTE IMMEDIATE 'COMMIT';
              END IF;
            END IF;
          END LOOP;
      ELSIF CHOICE = 'GENERALIZED' THEN
        FOR Y IN (SELECT QID, ADVERTISERID, RANK, TOTAL_BID, CTC, BUDGET FROM TABLE(RANK_TABLE_CHOSEN) WHERE ROWNUM <= TNUM)
          LOOP
            SELECT GEN_2_BALANCE,GEN_2_COUNT INTO BAL,CT FROM ADVERTISERS WHERE ADVERTISERID = Y.ADVERTISERID;
            IF CT < (Y.CTC * 100) THEN
              CT := CT + 1;
              SELECT COUNT(*) INTO REMAINING_BIDDERS FROM TABLE(RANK_TABLE_CHOSEN_COPY) WHERE RANK > Y.RANK;
              SELECT COUNT(*) INTO CT_HIGHEST_BID FROM (SELECT TOTAL_BID FROM TABLE(ALL_ADVERTISERS) WHERE TOTAL_BID < Y.TOTAL_BID);
              IF CT_HIGHEST_BID = 0 THEN
                NEXT_HIGHEST_TOTAL_BID := Y.TOTAL_BID;
              ELSE
                SELECT MAX(TOTAL_BID) INTO NEXT_HIGHEST_TOTAL_BID FROM TABLE(ALL_ADVERTISERS) WHERE TOTAL_BID < Y.TOTAL_BID;
              END IF;
              BAL := BAL - NEXT_HIGHEST_TOTAL_BID;
              EXECUTE IMMEDIATE 'UPDATE ADVERTISERS SET GEN_2_BALANCE = '||BAL||',GEN_2_COUNT = '||CT||' WHERE ADVERTISERID = '||Y.ADVERTISERID;
             EXECUTE IMMEDIATE 'COMMIT';
              EXECUTE IMMEDIATE 'INSERT INTO GENERALIZED_SECOND (QID,ADVERTISERID,RANK,BALANCE,BUDGET) VALUES ('||Y.QID||','||Y.ADVERTISERID||','||Y.RANK||','||BAL||','||Y.BUDGET||')';
            EXECUTE IMMEDIATE 'COMMIT';
            ELSE
              IF CT >= (Y.CTC * 100) AND CT < 99 THEN
                CT := CT + 1;
                EXECUTE IMMEDIATE 'UPDATE ADVERTISERS SET GEN_2_COUNT = '||CT||' WHERE ADVERTISERID = '||Y.ADVERTISERID;
                EXECUTE IMMEDIATE 'COMMIT';
                EXECUTE IMMEDIATE 'INSERT INTO GENERALIZED_SECOND (QID,ADVERTISERID,RANK,BALANCE,BUDGET) VALUES ('||Y.QID||','||Y.ADVERTISERID||','||Y.RANK||','||BAL||','||Y.BUDGET||')';
                EXECUTE IMMEDIATE 'COMMIT';
              ELSIF CT = 99 THEN
                CT := 0;
                EXECUTE IMMEDIATE 'UPDATE ADVERTISERS SET GEN_2_COUNT = '||CT||' WHERE ADVERTISERID = '||Y.ADVERTISERID;
                EXECUTE IMMEDIATE 'COMMIT';
                EXECUTE IMMEDIATE 'INSERT INTO GENERALIZED_SECOND (QID,ADVERTISERID,RANK,BALANCE,BUDGET) VALUES ('||Y.QID||','||Y.ADVERTISERID||','||Y.RANK||','||BAL||','||Y.BUDGET||')';
                EXECUTE IMMEDIATE 'COMMIT';
              END IF;
            END IF;
          END LOOP;
      END IF;
END SECOND_AUCTION;
/


CREATE OR REPLACE
PROCEDURE FIRST_AUCTION (RANK_TABLE_CHOSEN IN FINAL_TABLE, CHOICE IN VARCHAR2, TNUM IN NUMBER)IS
BAL NUMBER := 0;
CT NUMBER := 0;
BEGIN
      IF CHOICE = 'GREEDY' THEN
        FOR W IN (SELECT QID, ADVERTISERID, RANK, TOTAL_BID, BUDGET, CTC FROM TABLE(RANK_TABLE_CHOSEN) WHERE ROWNUM <= TNUM)
          LOOP
            SELECT G_1_BALANCE, G_1_COUNT INTO BAL, CT FROM ADVERTISERS WHERE ADVERTISERID = W.ADVERTISERID;
            IF CT < (W.CTC * 100) THEN
              CT := CT + 1;
              BAL := BAL - W.TOTAL_BID;
              EXECUTE IMMEDIATE 'UPDATE ADVERTISERS SET G_1_BALANCE = '||BAL||', G_1_COUNT = '||CT||'  WHERE ADVERTISERID = '||W.ADVERTISERID;
              EXECUTE IMMEDIATE 'COMMIT';
              EXECUTE IMMEDIATE 'INSERT INTO GREEDY_FIRST (QID,ADVERTISERID,RANK,BALANCE,BUDGET) VALUES ('||W.QID||','||W.ADVERTISERID||','||W.RANK||','||BAL||','||W.BUDGET||')';
              EXECUTE IMMEDIATE 'COMMIT';
            ELSE
              IF CT >= (W.CTC * 100) AND CT < 99 THEN
                CT := CT + 1;
                EXECUTE IMMEDIATE 'UPDATE ADVERTISERS SET G_1_COUNT = '||CT||' WHERE ADVERTISERID = '||W.ADVERTISERID;
                EXECUTE IMMEDIATE 'COMMIT';
                EXECUTE IMMEDIATE 'INSERT INTO GREEDY_FIRST (QID,ADVERTISERID,RANK,BALANCE,BUDGET) VALUES ('||W.QID||','||W.ADVERTISERID||','||W.RANK||','||BAL||','||W.BUDGET||')';
                EXECUTE IMMEDIATE 'COMMIT';
              ELSIF CT = 99 THEN
                CT := 0;
                EXECUTE IMMEDIATE 'UPDATE ADVERTISERS SET G_1_COUNT = '||CT||' WHERE ADVERTISERID = '||W.ADVERTISERID;
                EXECUTE IMMEDIATE 'COMMIT';
                EXECUTE IMMEDIATE 'INSERT INTO GREEDY_FIRST (QID,ADVERTISERID,RANK,BALANCE,BUDGET) VALUES ('||W.QID||','||W.ADVERTISERID||','||W.RANK||','||BAL||','||W.BUDGET||')';
                EXECUTE IMMEDIATE 'COMMIT';
              END IF;
            END IF;
          END LOOP;
      ELSIF CHOICE = 'BALANCE' THEN
        FOR X IN (SELECT QID, ADVERTISERID, RANK, TOTAL_BID, CTC, BUDGET FROM TABLE(RANK_TABLE_CHOSEN) WHERE ROWNUM <= TNUM)
          LOOP
            SELECT B_1_BALANCE, B_1_COUNT INTO BAL, CT FROM ADVERTISERS WHERE ADVERTISERID = X.ADVERTISERID;
            IF CT < (X.CTC * 100) THEN
              CT := CT + 1;
              BAL := BAL - X.TOTAL_BID;
              EXECUTE IMMEDIATE 'UPDATE ADVERTISERS SET B_1_BALANCE = '||BAL||', B_1_COUNT = '||CT||'  WHERE ADVERTISERID = '||X.ADVERTISERID;
              EXECUTE IMMEDIATE 'COMMIT';
              EXECUTE IMMEDIATE 'INSERT INTO BALANCE_FIRST (QID,ADVERTISERID,RANK,BALANCE,BUDGET) VALUES ('||X.QID||','||X.ADVERTISERID||','||X.RANK||','||BAL||','||X.BUDGET||')';
              EXECUTE IMMEDIATE 'COMMIT';
            ELSE
              IF CT >= (X.CTC * 100) AND CT < 99 THEN
                CT := CT + 1;
                EXECUTE IMMEDIATE 'UPDATE ADVERTISERS SET B_1_COUNT = '||CT||' WHERE ADVERTISERID = '||X.ADVERTISERID;
                EXECUTE IMMEDIATE 'COMMIT';
                EXECUTE IMMEDIATE 'INSERT INTO BALANCE_FIRST (QID,ADVERTISERID,RANK,BALANCE,BUDGET) VALUES ('||X.QID||','||X.ADVERTISERID||','||X.RANK||','||BAL||','||X.BUDGET||')';
                EXECUTE IMMEDIATE 'COMMIT';
              ELSIF CT = 99 THEN
                CT := 0;
              EXECUTE IMMEDIATE 'UPDATE ADVERTISERS SET B_1_COUNT = '||CT||' WHERE ADVERTISERID = '||X.ADVERTISERID;
              EXECUTE IMMEDIATE 'COMMIT';
              EXECUTE IMMEDIATE 'INSERT INTO BALANCE_FIRST (QID,ADVERTISERID,RANK,BALANCE,BUDGET) VALUES ('||X.QID||','||X.ADVERTISERID||','||X.RANK||','||BAL||','||X.BUDGET||')';
              EXECUTE IMMEDIATE 'COMMIT';
              END IF;
            END IF;
          END LOOP;
      ELSIF CHOICE = 'GENERALIZED' THEN
        FOR Z IN (SELECT QID, ADVERTISERID, RANK, TOTAL_BID, CTC, BUDGET FROM TABLE(RANK_TABLE_CHOSEN) WHERE ROWNUM <= TNUM)
         LOOP
            SELECT GEN_1_BALANCE, GEN_1_COUNT INTO BAL, CT FROM ADVERTISERS WHERE ADVERTISERID = Z.ADVERTISERID;
            IF CT < (Z.CTC * 100) THEN
              CT := CT + 1;
              BAL := BAL - Z.TOTAL_BID;
              EXECUTE IMMEDIATE 'UPDATE ADVERTISERS SET GEN_1_BALANCE = '||BAL||', GEN_1_COUNT = '||CT||'  WHERE ADVERTISERID = '||Z.ADVERTISERID;
              EXECUTE IMMEDIATE 'COMMIT';
              EXECUTE IMMEDIATE 'INSERT INTO GENERALIZED_FIRST (QID,ADVERTISERID,RANK,BALANCE,BUDGET) VALUES ('||Z.QID||','||Z.ADVERTISERID||','||Z.RANK||','||BAL||','||Z.BUDGET||')';
              EXECUTE IMMEDIATE 'COMMIT';
            ELSE
              IF CT >= (Z.CTC * 100) AND CT < 99 THEN
                CT := CT + 1;
                EXECUTE IMMEDIATE 'UPDATE ADVERTISERS SET GEN_1_COUNT = '||CT||' WHERE ADVERTISERID = '||Z.ADVERTISERID;
                EXECUTE IMMEDIATE 'COMMIT';
                EXECUTE IMMEDIATE 'INSERT INTO GENERALIZED_FIRST (QID,ADVERTISERID,RANK,BALANCE,BUDGET) VALUES ('||Z.QID||','||Z.ADVERTISERID||','||Z.RANK||','||BAL||','||Z.BUDGET||')';
                EXECUTE IMMEDIATE 'COMMIT';
              ELSIF CT = 99 THEN
                CT := 0;
                EXECUTE IMMEDIATE 'UPDATE ADVERTISERS SET GEN_1_COUNT = '||CT||' WHERE ADVERTISERID = '||Z.ADVERTISERID;
                EXECUTE IMMEDIATE 'COMMIT';
                EXECUTE IMMEDIATE 'INSERT INTO GENERALIZED_FIRST (QID,ADVERTISERID,RANK,BALANCE,BUDGET) VALUES ('||Z.QID||','||Z.ADVERTISERID||','||Z.RANK||','||BAL||','||Z.BUDGET||')';
                EXECUTE IMMEDIATE 'COMMIT';
              END IF;
            END IF;
          END LOOP;
      END IF;
END FIRST_AUCTION;
/

CREATE OR REPLACE
FUNCTION GREEDY_BALANCE (QID IN NUMBER,QUERY_IND IN INDEX_TABLE, BIDDERLIST IN BIDDER_TABLE,TNUM IN NUMBER,ALG_TYPE IN VARCHAR2, CHOICE IN VARCHAR2) RETURN VARCHAR2 IS
  ADVERTISER_IND INDEX_TABLE := INDEX_TABLE();
  RANK_TABLE RANKED_TABLE := RANKED_TABLE();
  RANK_TABLE_RANKED FINAL_TABLE := FINAL_TABLE();
  RANK_TABLE_CHOSEN FINAL_TABLE := FINAL_TABLE();
  ALL_ADVERTISERS AID_TABLE := AID_TABLE();
  P NUMBER := 0;
  D NUMBER := 0;
  Q NUMBER := 0;
  L NUMBER := 0;
  V NUMBER := 0;
  ADV_CNT NUMBER := 0;
  SIMILARITY NUMBER := 0.00;
  QSCORE NUMBER := 0.00;
  AD_RANK NUMBER := 0;
  BALANCE NUMBER := 0;
BEGIN
   FOR S IN (SELECT ADVERTISERID, TOTAL_BID, G1_BALANCE, G2_BALANCE, B1_BALANCE, B2_BALANCE, BUDGET, CTC FROM TABLE(BIDDERLIST))
       LOOP
        -- IF HIS BALANCE > TOTAL BID THEN HE IS ELIGIBLE FOR AUCTION
        IF CHOICE = 'FIRST' AND ALG_TYPE = 'GREEDY' THEN
          BALANCE := S.G1_BALANCE;
        ELSIF CHOICE = 'SECOND' AND ALG_TYPE = 'GREEDY' THEN
          BALANCE := S.G2_BALANCE;
        ELSIF CHOICE = 'FIRST' AND ALG_TYPE = 'BALANCE' THEN
          BALANCE := S.B1_BALANCE;
     --     dbms_output.put_line('BALANCE 1 balance:'||balance);
        ELSIF CHOICE = 'SECOND' AND ALG_TYPE = 'BALANCE' THEN
          BALANCE := S.B2_BALANCE;
     --     dbms_output.put_line('BALANCE 2 balance:'||balance);
        END IF;
        IF S.TOTAL_BID > 0 AND S.TOTAL_BID <= BALANCE THEN
        -- GREEDY ALGORITHM
            ADVERTISER_IND := CREATE_ADVERTISER_VECTOR(S.ADVERTISERID);
            SIMILARITY := SIMILARITY_CALCULATOR(QUERY_IND,ADVERTISER_IND);
      --       dbms_output.put_line('SIMILARITY:'||SIMILARITY);
            QSCORE := SIMILARITY * S.CTC;
     --        dbms_output.put_line('qualityscore:'||QSCORE);
      --     dbms_output.put_line('ctc:'|| S.CTC);
            IF ALG_TYPE = 'GREEDY' THEN
              AD_RANK := QSCORE * S.TOTAL_BID;
     --         dbms_output.put_line('****************ADVERTISERID**************:'||s.advertiserid);
     --         dbms_output.put_line('greedy adrank:'||AD_RANK);
            ELSIF ALG_TYPE = 'BALANCE' THEN
              AD_RANK := QSCORE * BALANCE;
     --         dbms_output.put_line('****************ADVERTISERID**************:'||s.advertiserid);
     --         dbms_output.put_line('BALANCE adrank:'||AD_RANK);
            END IF;
            RANK_TABLE.EXTEND;
            Q := Q + 1;
            RANK_TABLE(Q) := RANKED_OBJ(QID,S.ADVERTISERID,AD_RANK,S.BUDGET,S.TOTAL_BID,S.CTC);
            ALL_ADVERTISERS.EXTEND;
            D := D + 1;
            ALL_ADVERTISERS(D) := AID_OBJ(S.ADVERTISERID, S.TOTAL_BID,0);
        END IF;
      END LOOP;
  FOR J IN (SELECT QID, ADVERTISERID, BUDGET, CTC, RANK() OVER (ORDER BY ADRANK DESC, ADVERTISERID ASC) AS RANK, TOTAL_BID FROM TABLE(RANK_TABLE))
    LOOP
      RANK_TABLE_RANKED.EXTEND;
      L := L + 1;
      RANK_TABLE_RANKED(L) := FINAL_OBJ(QID, J.ADVERTISERID,J.RANK, J.BUDGET, J.TOTAL_BID,J.CTC);
    END LOOP;
  
  FOR H IN (SELECT QID, ADVERTISERID, RANK, BUDGET, CTC, TOTAL_BID FROM TABLE(RANK_TABLE_RANKED) WHERE ROWNUM <= TNUM + 1)
    LOOP
      RANK_TABLE_CHOSEN.EXTEND;
      V := V + 1;
      RANK_TABLE_CHOSEN(V) := FINAL_OBJ(H.QID, H.ADVERTISERID, H.RANK, H.BUDGET, H.TOTAL_BID, H.CTC);
    END LOOP;
    IF CHOICE = 'FIRST' AND ALG_TYPE = 'GREEDY' THEN
      FIRST_AUCTION(RANK_TABLE_CHOSEN,'GREEDY', TNUM);
    ELSIF CHOICE = 'SECOND' AND ALG_TYPE = 'GREEDY' THEN
      SECOND_AUCTION(RANK_TABLE_CHOSEN,'GREEDY',TNUM,ALL_ADVERTISERS);
    ELSIF CHOICE = 'FIRST' AND ALG_TYPE = 'BALANCE' THEN
      FIRST_AUCTION(RANK_TABLE_CHOSEN,'BALANCE', TNUM);
    ELSIF CHOICE = 'SECOND' AND ALG_TYPE = 'BALANCE' THEN
      SECOND_AUCTION(RANK_TABLE_CHOSEN,'BALANCE',TNUM,ALL_ADVERTISERS);
    END IF;
  RETURN 'SUCCESS';
END GREEDY_BALANCE;
/



CREATE OR REPLACE
FUNCTION GENERALIZED (QID IN NUMBER,QUERY_IND IN INDEX_TABLE, BIDDERLIST IN BIDDER_TABLE,TNUM IN NUMBER, CHOICE IN VARCHAR2) RETURN VARCHAR2 IS
  ADVERTISER_IND INDEX_TABLE := INDEX_TABLE();
  RANK_TABLE RANKED_TABLE := RANKED_TABLE();
  RANK_TABLE_RANKED FINAL_TABLE := FINAL_TABLE();
  RANK_TABLE_CHOSEN FINAL_TABLE := FINAL_TABLE();
  ALL_ADVERTISERS AID_TABLE := AID_TABLE();
  P NUMBER := 0;
  D NUMBER := 0;
  Q NUMBER := 0;
  L NUMBER := 0;
  V NUMBER := 0;
  E NUMBER := 2.7182818284590;
  F NUMBER := 0;
  ADV_CNT NUMBER := 0;
  PSI NUMBER := 0;
  SIMILARITY NUMBER := 0.00;
  QSCORE NUMBER := 0.00;
  AD_RANK NUMBER := 0;
  BALANCE NUMBER := 0;
BEGIN
 -- dbms_output.put_line('I am here');
   FOR S IN (SELECT ADVERTISERID, TOTAL_BID, GEN1_BALANCE, GEN2_BALANCE, BUDGET, CTC FROM TABLE(BIDDERLIST))
       LOOP
        -- IF HIS BALANCE > TOTAL BID THEN HE IS ELIGIBLE FOR AUCTION
        IF CHOICE = 'FIRST' THEN
          BALANCE := S.GEN1_BALANCE;
        ELSE
          BALANCE := S.GEN2_BALANCE;
        END IF;
        IF S.TOTAL_BID > 0 AND S.TOTAL_BID <= BALANCE THEN
        -- GREEDY ALGORITHM
          F := BALANCE / S.BUDGET;
         -- dbms_output.put_line('fraction'||f);
          PSI := (1 - (1/POWER(E,(F)))) * S.TOTAL_BID;
      --    dbms_output.put_line('PSI:'||PSI);
          ADVERTISER_IND := CREATE_ADVERTISER_VECTOR(S.ADVERTISERID);
          SIMILARITY := SIMILARITY_CALCULATOR(QUERY_IND,ADVERTISER_IND);
          QSCORE := SIMILARITY * S.CTC;   
      --     dbms_output.put_line('QSCORE'||QSCORE);
          AD_RANK := QSCORE * PSI;
    --     dbms_output.put_line('GEN_adrank:'||AD_RANK);
          RANK_TABLE.EXTEND;
          Q := Q + 1;
          RANK_TABLE(Q) := RANKED_OBJ(QID,S.ADVERTISERID,AD_RANK,S.BUDGET,S.TOTAL_BID,S.CTC);
          ALL_ADVERTISERS.EXTEND;
          D := D + 1;
          ALL_ADVERTISERS(D) := AID_OBJ(S.ADVERTISERID, S.TOTAL_BID,0);
        END IF;
      END LOOP;
  FOR J IN (SELECT QID, ADVERTISERID, CTC,BUDGET, RANK() OVER (ORDER BY ADRANK DESC, ADVERTISERID ASC) AS RANK, TOTAL_BID FROM TABLE(RANK_TABLE))
    LOOP
      RANK_TABLE_RANKED.EXTEND;
      L := L + 1;
      RANK_TABLE_RANKED(L) := FINAL_OBJ(QID,J.ADVERTISERID,J.RANK,J.BUDGET,J.TOTAL_BID,J.CTC);
    END LOOP;
  
  FOR H IN (SELECT QID, ADVERTISERID, RANK, BUDGET,CTC, TOTAL_BID FROM TABLE(RANK_TABLE_RANKED) WHERE ROWNUM <= TNUM + 1)
    LOOP
      RANK_TABLE_CHOSEN.EXTEND;
      V := V + 1;
      RANK_TABLE_CHOSEN(V) := FINAL_OBJ(H.QID,H.ADVERTISERID, H.RANK, H.BUDGET,H.TOTAL_BID,H.CTC);
    END LOOP;
    IF CHOICE = 'FIRST' THEN
      FIRST_AUCTION(RANK_TABLE_CHOSEN,'GENERALIZED', TNUM);
    ELSE
      SECOND_AUCTION(RANK_TABLE_CHOSEN,'GENERALIZED',TNUM,ALL_ADVERTISERS);
    END IF;
  RETURN 'SUCCESS';
END GENERALIZED;
/

CREATE OR REPLACE
FUNCTION TOKENIZE_MATCH_QUERY
( QUERYCONTENT IN VARCHAR2, 
  QID IN NUMBER,
  T1NUM IN NUMBER,
  T2NUM IN NUMBER,
  T3NUM IN NUMBER,
  T4NUM IN NUMBER,
  T5NUM IN NUMBER,
  T6NUM IN NUMBER)
  RETURN VARCHAR2
IS
  -- CREATE VARIABLES
  MATCHED_AID_TABLE MATCHED_KEYWORD_AID_TABLE := MATCHED_KEYWORD_AID_TABLE();
  MATCHED_AID_TABLE_DISTINCT MATCHED_KEYWORD_AID_TABLE := MATCHED_KEYWORD_AID_TABLE();
  AUC_TABLE AUCTION_TABLE := AUCTION_TABLE();
  RANK_TABLE_CHOSEN FINAL_TABLE := FINAL_TABLE();
  QUERY_IND INDEX_TABLE := INDEX_TABLE();
  QUERY_IND_TEMP INDEX_TABLE := INDEX_TABLE();
  BIDDERLIST BIDDER_TABLE := BIDDER_TABLE();
  
  M NUMBER := 0;
  N NUMBER := 0;
  O NUMBER := 0;
  R NUMBER := 0;
  U NUMBER := 0;
 
  G1_BAL NUMBER := 0;
  G2_BAL NUMBER := 0;
  B1_BAL NUMBER := 0;
  B2_BAL NUMBER := 0;
  GEN1_BAL NUMBER := 0;
  GEN2_BAL NUMBER := 0;
  
  BUDGT NUMBER := 0;
  
  G1 VARCHAR2(10) := NULL;
  G2 VARCHAR2(10) := NULL;
  B1 VARCHAR2(10) := NULL;
  B2 VARCHAR2(10) := NULL;
  GEN1 VARCHAR2(10) := NULL;
  GEN2 VARCHAR2(10) := NULL;
  
  INDNUMB NUMBER := 0;
  CNTN NUMBER :=0 ;
  COM_TOK NUMBER := 0;
  WORD_COUNT NUMBER := 0;
  COUNTER NUMBER := 1;
  TOKEN VARCHAR2(400);
  CLICKTC NUMBER := 0;
  
BEGIN
-- FOR THE GIVEN QUERY COUNT THE NUMBER OF WORDS
  SELECT ((LENGTH(QUERYCONTENT) - LENGTH(REPLACE(QUERYCONTENT, ' '))) /
            LENGTH(' ')) + 1 INTO WORD_COUNT
  FROM   dual;
  
-- TOKENIZE QUERY  
--TILL THE END OF QUERY IS REACHED
  WHILE COUNTER <= WORD_COUNT
    LOOP
    --FOR EACH TOKEN
      SELECT REGEXP_SUBSTR(QUERYCONTENT, '[^\ ]+', 1, COUNTER) INTO TOKEN
      FROM DUAL;
      COUNTER := COUNTER + 1;
      SELECT COUNT(*) INTO COM_TOK FROM WORDS_DICTIONARY WHERE WORDS = TOKEN;
      -- SEE IF THERE EXISTS ANY ADVERTISER WHO HAS BID FOR THIS TOKEN USING DICTIONARY
      IF COM_TOK > 0 THEN
      -- IF ADVERTISER BID EXISTS THEN GET INDEX OF THIS TOKEN FROM DICTIONARY
        SELECT INDEX_NUMBER INTO INDNUMB FROM WORDS_DICTIONARY WHERE LOWER(WORDS) = LOWER(TOKEN);
        -- GET COUNT OF THIS TOKEN IN THE QUERY
        SELECT ((LENGTH(QUERYCONTENT) - LENGTH(REPLACE(QUERYCONTENT, TOKEN))) /
        LENGTH(TOKEN)) INTO CNTN
        FROM DUAL;
        --CREATE QUERY SPARSE VECTOR FOR THIS TOKEN USING INDEX NUMBER AND COUNT
        QUERY_IND_TEMP.EXTEND;
        N := N+1;
        QUERY_IND_TEMP(N) := INDEX_OBJ(QID,INDNUMB,CNTN);
        --GET ALL THE BIDDER'S INFORMATION WHO HAVE BID FOR THIS TOKEN
        FOR R IN 
        (SELECT KEYWORD,ADVERTISERID,BID  FROM KEYWORDS WHERE LOWER(KEYWORD) = LOWER(TOKEN))
          LOOP
            MATCHED_AID_TABLE.EXTEND;
            O := O+1;
            MATCHED_AID_TABLE(O) := MATCHED_KEYWORD_AID_OBJ(R.KEYWORD,R.ADVERTISERID,R.BID);
          END LOOP;
      END IF;
    END LOOP;
    -- AVAILABLE ARE UNREFIGNED QUERY SPARSED VECTOR AND BIDDER'S INFORMATION
    -- REFINE QUERY SPARSED VECTOR
  FOR Z IN (SELECT INDNUM, COUNT(*) AS CNT FROM TABLE(QUERY_IND_TEMP) GROUP BY INDNUM)
    LOOP
      QUERY_IND.EXTEND;
      R := R+1;
      QUERY_IND(R) := INDEX_OBJ(QID,Z.INDNUM,Z.CNT);
    END LOOP;
    -- REMOVE DUPLICATES FROM BIDDER INFORMATION
  FOR D IN 
  (SELECT DISTINCT KEYWORD,ADVERTISERID,BID FROM TABLE(MATCHED_AID_TABLE))
    LOOP
      MATCHED_AID_TABLE_DISTINCT.EXTEND;
      M := M+1;
      MATCHED_AID_TABLE_DISTINCT(M) := MATCHED_KEYWORD_AID_OBJ(D.KEYWORD,D.ADVERTISERID,D.BID);
    END LOOP;
    
    -- GET TOTAL BID OF EACH BIDDER FROM BIDDER INFORMATION
    --FOR EACH ADVERTISER
    
     FOR B IN (SELECT ADVERTISERID,SUM(BID) AS TOTAL_BID FROM TABLE(MATCHED_AID_TABLE_DISTINCT)
    GROUP BY ADVERTISERID)
       LOOP
        SELECT AD.G_1_BALANCE, AD.G_2_BALANCE, AD.B_1_BALANCE, AD.B_2_BALANCE, AD.GEN_1_BALANCE, AD.GEN_2_BALANCE, AD.CTC, AD.BUDGET
        INTO  G1_BAL, G2_BAL, B1_BAL, B2_BAL, GEN1_BAL, GEN2_BAL, CLICKTC, BUDGT FROM ADVERTISERS AD 
        WHERE AD.ADVERTISERID = B.ADVERTISERID;
        BIDDERLIST.EXTEND;
        U := U + 1;
        BIDDERLIST(U) := BIDDER_OBJ(B.ADVERTISERID,B.TOTAL_BID, G1_BAL, G2_BAL, B1_BAL, B2_BAL, GEN1_BAL, GEN2_BAL, BUDGT, CLICKTC);
      END LOOP;
    G1 := GREEDY_BALANCE(QID,QUERY_IND,BIDDERLIST,T1NUM,'GREEDY','FIRST');
    G2 := GREEDY_BALANCE(QID,QUERY_IND,BIDDERLIST,T2NUM,'GREEDY','SECOND');
    B1 := GREEDY_BALANCE(QID,QUERY_IND,BIDDERLIST,T3NUM,'BALANCE','FIRST');
    B2 := GREEDY_BALANCE(QID,QUERY_IND,BIDDERLIST,T4NUM,'BALANCE','SECOND');
    GEN1 := GENERALIZED(QID,QUERY_IND,BIDDERLIST,T5NUM,'FIRST');
    GEN2 := GENERALIZED(QID,QUERY_IND,BIDDERLIST,T6NUM,'SECOND');
    
RETURN GEN2;
END TOKENIZE_MATCH_QUERY;
/


CREATE OR REPLACE FUNCTION READ_QUERY_TABLE
( T1NUM IN NUMBER,
  T2NUM IN NUMBER,
  T3NUM IN NUMBER,
  T4NUM IN NUMBER,
  T5NUM IN NUMBER,
  T6NUM IN NUMBER)
  RETURN VARCHAR2 IS
 CURSOR QUERIES_CUR 
    IS
      SELECT QID,QUERY FROM QUERIES ORDER BY QID ASC;
    TYPE QUERIES_TABLE IS TABLE OF QUERIES_CUR%ROWTYPE
        INDEX BY PLS_INTEGER;
    QUERIES_OBJ QUERIES_TABLE;
    OUTPUT VARCHAR2(10) := NULL;
BEGIN
  --ARRANGE_INDEX_NUMBER();
  --CREATE_ADV_SPARSE_MATRIX();
   OPEN QUERIES_CUR;
   LOOP
   FETCH QUERIES_CUR 
            BULK COLLECT INTO QUERIES_OBJ LIMIT 5000;    
   FOR R IN 1 .. QUERIES_OBJ.COUNT 
        LOOP
            OUTPUT := TOKENIZE_MATCH_QUERY(QUERIES_OBJ(R).QUERY,QUERIES_OBJ(R).QID, T1NUM, T2NUM, T3NUM, T4NUM, T5NUM, T6NUM);
        END LOOP;
        EXIT WHEN QUERIES_OBJ.COUNT < 5000;
        END LOOP;
   CLOSE QUERIES_CUR;
  RETURN 'SUCCESS';
END READ_QUERY_TABLE;
/


ALTER SESSION SET PLSQL_CODE_TYPE=NATIVE;

ALTER SESSION SET PLSQL_OPTIMIZE_LEVEL = 3;
ALTER FUNCTION SIMILARITY_CALCULATOR COMPILE PLSQL_OPTIMIZE_LEVEL = 3 REUSE SETTINGS;
ALTER FUNCTION GENERALIZED COMPILE PLSQL_OPTIMIZE_LEVEL = 3 REUSE SETTINGS;
ALTER FUNCTION GREEDY_BALANCE COMPILE PLSQL_OPTIMIZE_LEVEL = 3 REUSE SETTINGS;
ALTER FUNCTION CREATE_ADVERTISER_VECTOR COMPILE PLSQL_OPTIMIZE_LEVEL = 3 REUSE SETTINGS;
ALTER PROCEDURE FIRST_AUCTION COMPILE PLSQL_OPTIMIZE_LEVEL = 3 REUSE SETTINGS;
ALTER PROCEDURE SECOND_AUCTION COMPILE PLSQL_OPTIMIZE_LEVEL = 3 REUSE SETTINGS;

EXIT;


